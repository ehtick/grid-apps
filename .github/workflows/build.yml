name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build Electron app
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build

      - name: Upload Linux artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: kiri-${{ matrix.os }}-${{ github.ref_name }}
          path: dist/*.zip

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: kiri-${{ matrix.os }}-${{ github.ref_name }}
          path: dist/*.zip

      - name: Upload Mac artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: kiri-${{ matrix.os }}-${{ github.ref_name }}
          path: dist/*.zip

  create_release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release name
        run: node bin/github-getver.js "${{ github.event_name }}"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Download All Release Assets
        uses: actions/download-artifact@v4.1.7
        with:
          path: artifacts

      - name: Display Downloaded Assets
        run: ls -ltR artifacts

      - name: Upload Release Asset (Linux)
        if: needs.build.outputs.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/*.zip
          asset_name: kiri-ubuntu-latest-master.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (macOS)
        if: needs.build.outputs.os == 'macos-latest'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/*.zip
          asset_name: kiri-macos-latest-master.dmg
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Windows)
        if: needs.build.outputs.os == 'windows-latest'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/*.zip
          asset_name: kiri-windows-latest-master.exe
          asset_content_type: application/octet-stream
