name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build Electron app
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: kiri-${{ matrix.os }}-${{ github.ref_name }}
          path: dist/

  create_release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract tag name
        run: node bin/github-getver.js

      - name: Install GitHub CLI
        run: |
          curl -sSL https://github.com/cli/cli/releases/download/v2.0.0/gh_2.0.0_linux_amd64.tar.gz | tar -xz
          sudo mv gh_2.0.0_linux_amd64/bin/gh /usr/local/bin/

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ env.TAG_NAME }}; then
            echo "Release exists"
            echo "release_exists=true" >> $GITHUB_ENV
          else
            echo "Release does not exist"
            echo "release_exists=false" >> $GITHUB_ENV
          fi

      - name: Delete existing release
        if: env.release_exists == 'true'
        run: gh release delete ${{ env.TAG_NAME }} --yes

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Download and Upload Release Assets (Linux)
        if: needs.build.outputs.os == 'ubuntu-latest'
        uses: actions/download-artifact@v2
        with:
          name: kiri-ubuntu-latest-${{ github.ref_name }}

      - name: Upload Release Asset (Linux)
        if: needs.build.outputs.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*
          asset_name: linux-build-${{ env.TAG_NAME }}.zip
          asset_content_type: application/zip

      - name: Download and Upload Release Assets (macOS)
        if: needs.build.outputs.os == 'macos-latest'
        uses: actions/download-artifact@v2
        with:
          name: kiri-macos-latest-${{ github.ref_name }}

      - name: Upload Release Asset (macOS)
        if: needs.build.outputs.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*
          asset_name: macos-build-${{ env.TAG_NAME }}.zip
          asset_content_type: application/zip

      - name: Download and Upload Release Assets (Windows)
        if: needs.build.outputs.os == 'windows-latest'
        uses: actions/download-artifact@v2
        with:
          name: kiri-windows-latest-${{ github.ref_name }}

      - name: Upload Release Asset (Windows)
        if: needs.build.outputs.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*
          asset_name: windows-build-${{ env.TAG_NAME }}.zip
          asset_content_type: application/zip
